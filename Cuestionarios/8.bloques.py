# -*- coding: utf-8 -*-
"""SOL_JPEG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A6gRkis_DflYR3nk0Mggktv4dgoFKwYq

Tablas
"""

import math
from scipy.fftpack import dct, idct
AC_Luminancia=[
['00','01', '100', '1011', '11010',
'111000', '1111000', '1111110110', '1111111110000010', '1111111110000011'],
['1100', '11011', '1111001', '111110110', '11111110110',
'1111111110000100', '1111111110000101', '1111111110000110', '1111111110000111', '1111111110001000'],
['11100', '11111001', '1111110111', '111111110100', '111111110001001',
'111111110001010', '111111110001011', '111111110001100', '111111110001101', '111111110001110'],
['111010', '111110111', '111111110101', '1111111110001111', '1111111110010000',
'1111111110010001', '1111111110010010', '1111111110010011', '1111111110010100', '1111111110010101'],
['111011', '1111111000', '1111111110010110', '1111111110010111', '1111111110011000',
'1111111110011001', '1111111110011010', '1111111110011011', '1111111110011100', '1111111110011101'],
['1111010', '11111110111', '1111111110011110', '1111111110011111', '1111111110100000',
'1111111110100001', '1111111110100010', '1111111110100011', '1111111110100100', '1111111110100101'],
['1111011', '111111110110', '1111111110100110', '1111111110100111', '1111111110101000',
'1111111110101001', '1111111110101010', '1111111110101011', '1111111110101100', '1111111110101101'],
['11111010', '111111110111', '1111111110101110', '1111111110101111', '1111111110110000',
'1111111110110001', '1111111110110010', '1111111110110011', '1111111110110100', '1111111110110101'],
['111111000', '111111111000000', '1111111110110110', '1111111110110111', '1111111110111000',
'1111111110111001', '1111111110111010', '1111111110111011', '1111111110111100', '1111111110111101'],
['111111001', '1111111110111110', '1111111110111111', '1111111111000000', '1111111111000001',
'1111111111000010', '1111111111000011', '1111111111000100', '1111111111000101', '1111111111000110'],
['111111010', '1111111111000111', '1111111111001000', '1111111111001001', '1111111111001010',
'1111111111001011', '1111111111001100', '1111111111001101', '1111111111001110', '1111111111001111'],
['1111111001', '1111111111010000', '1111111111010001', '1111111111010010', '1111111111010011',
'1111111111010100', '1111111111010101', '1111111111010110', '1111111111010111', '1111111111011000'],
['1111111010', '1111111111011001', '1111111111011010', '1111111111011011', '1111111111011100',
'1111111111011101', '1111111111011110', '1111111111011111', '1111111111100000', '1111111111100001'],
['11111111000', '1111111111100010', '1111111111100011', '1111111111100100', '1111111111100101',
'1111111111100110', '1111111111100111', '1111111111101000', '1111111111101001', '1111111111101010'],
['1111111111101011', '1111111111101100', '1111111111101101', '1111111111101110', '1111111111101111',
'1111111111110000', '1111111111110001', '1111111111110010', '1111111111110011', '1111111111110100'],
['11111111001', '1111111111110101', '1111111111110110', '1111111111110111', '1111111111111000',
'1111111111111001', '1111111111111010', '1111111111111011', '1111111111111101', '1111111111111110']
]

I_AC_Luminancia = {}
i = 0
j = 0
while i < len(AC_Luminancia):
    j = 0
    while j < len(AC_Luminancia[i]):
        key = AC_Luminancia[i][j]
        I_AC_Luminancia[key] = (i,j)
        j += 1
    i += 1

Q_Luminance=[
    [16 ,11, 10, 16,  24,  40,  51,  61],
    [12, 12, 14, 19,  26,  58,  60,  55],
    [14, 13, 16, 24,  40,  57,  69,  56],
    [14, 17, 22, 29,  51,  87,  80,  62],
    [18, 22, 37, 56,  68, 109, 103,  77],
    [24, 35, 55, 64,  81, 104, 113,  92],
    [49, 64, 78, 87, 103, 121, 120, 101],
    [72, 92, 95, 98, 112, 100, 103,  99]]

"""//////////////////////////////////////////////
TODAS LAS FUNCIONES NECESARIAS
//////////////////////////////////////////////
"""

def numToNbits(n,numBits):
    res = bin(n)[2:]
    if(len(res) < numBits):
        res = "0" * (numBits - len(res)) + res
    return res

def get_fila_columna(n):
    pos = abs(n)
    fila = math.ceil(math.log(pos,2))
    columna = n
    if pos == 2**fila:
        fila += 1
    if n<0:
        columna = n + (2**fila - 1)
    return (fila,columna)
def num_to_Huffman(n):
    if n == 0:
        return "0"
    fila , columna = get_fila_columna(n)
    res = "1"*fila + "0" + numToNbits(columna,fila)
    return res
def DC_calculator(fila,columna,repre,code):
    if fila == 0:
        return 0
    top = 2**fila
    p1 = columna
    p2 = columna - (top - 1)
    if num_to_Huffman(p1) == code:
        return p1 + repre
    return p2 + repre
def dct_bloque(p):
    # 2 llamadas porque es DCT 2D
    aux = dct(p, norm='ortho', axis=0)
    return dct(aux, norm='ortho', axis=1)

def idct_bloque(p):
    aux = idct(p, norm='ortho', axis=0)
    return idct(aux, norm='ortho', axis=1)

def quant(p):
    N = len(p)
    for u in range(N):
        for v in range(N):
            p[u][v] = round(p[u][v]/Q_Luminance[u][v])
    return p
def dequant(p):
    N = len(p)
    for u in range(N):
        for v in range(N):
            p[u][v] = round(p[u][v]*Q_Luminance[u][v])
    return p

def round_block(p):
    N = len(p)
    for u in range(N):
        for v in range(N):
            p[u][v] = round(p[u][v])
    return p

"""///////////////////////////////////////////////
DC LISTA A DC BINARIO
///////////////////////////////////////////////
"""

#Coeficientes DC a codigo binario
#Coloca aqui tu lista de numeros papu
"""
dc = [1069, 989, 1067, 848, 1065, 1091, 1079, 1079, 845, 888, 1072, 913, 1078, 1041, 845, 1071, 847, 1016, 960, 938, 874, 964, 920, 1041, 987, 885, 978, 862, 1078, 913, 866, 912, 1082, 880, 992, 1091, 842, 1081, 878, 856, 1003, 883, 982]
represen = 0
result = ""
for x in dc:
    result += num_to_Huffman(x - represen)
    represen = x
print(result)
"""
"""///////////////////////////////////////////////
DC BINARIO A DC LISTA
///////////////////////////////////////////////
"""

#Coeficientes DC de codigo binario a normal
#Coloca aqui string binario papu
"""
dc_bin

i = 0
n = len(dc_bin)
res = []
fila = 0
columna = 0
repre = 0
while i < n:
    fila = 0
    while dc_bin[i] == "1":
        fila += 1
        i += 1
    i += 1
    if fila != 0:
        code = "1"*fila + "0"+ dc_bin[i:i+fila]
        columna = int(dc_bin[i:i+fila],2)
        i = i + fila
        repre = DC_calculator(fila,columna,repre, code)
    res+= [repre]
print(sum(res))
print(res)
"""
"""///////////////////////////////////////////////
AC LISTA A AC BINARIO
///////////////////////////////////////////////
"""

#Coeficientes AC a codigo binario
#Coloca aqui tu lista de numeros papu

ac = [9, 9, 2, 0, 0, 0, 0, -9, -8, 5, 8, 0, 0, 0, 0, 0, 0, 2]
z = 0
res = ""
for x in ac:
    if x == 0:
        z += 1
    else:
        fila, columna = get_fila_columna(x)
        while z > 15:
            res += AC_Luminancia[15][0]
            z -= 15
        res += AC_Luminancia[z][fila - 1] + numToNbits(columna,fila)
        z = 0
res += "1010"
print(res)


"""///////////////////////////////////////////////
AC BINARIO A AC LISTA
///////////////////////////////////////////////
"""

#Coeficientes AC de codigo binario a normal
#Coloca aqui tu string binario papu
"""
ac_bin = "100000101110010011111111110010110110111111110101001100110111111111001111110001010"
i = 0
res = []
stop = False
while i < len(ac_bin) or stop:
    key = ac_bin[:i]
    if key == "1010": stop = True
    elif key in I_AC_Luminancia:
        z, fila = I_AC_Luminancia[key]
        if z >= 15:
            res += [0]*15
            ac_bin = ac_bin[i:]
            i = 0
        else:
            fila += 1 
            res += [0]*z
            columna = int(ac_bin[i:i + fila],2)
            code = "1"*fila + "0" + ac_bin[i:i + fila]
            res += [DC_calculator(fila,columna,0,code)]
            ac_bin = ac_bin[i + fila:]
            i = 0
    else: i += 1
    
print(res)
"""
"""//////////////////////////////////////////
BLOQUE IMAGEN A BLOQUE JPEG
//////////////////////////////////////////
"""

#Imagen en grises a JPEG
#Coloca aqui tu bloque papu
"""
bloq = [[46, 44, 59, 48, 44, 39, 38, 45], [48, 44, 57, 49, 43, 40, 37, 51], [50, 42, 51, 54, 40, 40, 39, 62], [52, 45, 45, 60, 54, 44, 41, 59], [57, 44, 41, 68, 65, 53, 41, 50], [51, 45, 40, 59, 68, 55, 41, 50], [48, 44, 40, 53, 55, 47, 41, 55], [51, 54, 42, 47, 58, 54, 45, 49]]
aux = dct_bloque(bloq)
aux2 = quant(aux)
aux3 = dequant(aux2)
aux4 = idct_bloque(aux3)
print(round_block(aux4))
"""
"""/////////////////////////////////////////
Pregunta de teoria
////////////////////////////////////////

![image.png](attachment:cdaa1558-cb78-434e-8527-76d68e825832.png)

![image.png](attachment:d42c6a18-0752-4f88-88fa-0be256f1dd5a.png)
"""